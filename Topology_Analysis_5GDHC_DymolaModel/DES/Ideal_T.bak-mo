within Topology_Analysis_5GDHC.DES;
model Ideal_T "Ideal heating and cooling plant with leaving temperature as set point"

   extends Buildings.Fluid.Interfaces.PartialTwoPortInterface(
    final m_flow(start=0),
    final allowFlowReversal = true,
    final dp(start=0));


  replaceable package Medium =
      Buildings.Media.Water "Medium model for water";

  parameter Modelica.SIunits.Pressure dp_nominal(displayUnit="Pa")=30000
    "Pressure difference at nominal flow rate"
    annotation(Dialog(group="Design parameter"));

  parameter Boolean linearizeFlowResistance=false
    "= true, use linear relation between m_flow and dp for any flow rate"
    annotation(Dialog(tab="Advanced"));
  parameter Modelica.SIunits.MassFlowRate m_flow_nominal = 1;


  Modelica.Blocks.Interfaces.RealOutput QHea_flow(unit="W")
    "Heat input into fluid"
    annotation (Placement(transformation(extent={{280,50},{300,70}})));

  Modelica.Blocks.Interfaces.RealOutput QCoo_flow(unit="W")
    "Heat extracted from fluid"
    annotation (Placement(transformation(extent={{280,30},{300,50}}), iconTransformation(extent={{280,30},{300,50}})));
protected
  final parameter Medium.ThermodynamicState sta_default = Medium.setState_pTX(
    T=Medium.T_default,
    p=Medium.p_default,
    X=Medium.X_default[1:Medium.nXi]) "Medium state at default properties";
  final parameter Modelica.SIunits.SpecificHeatCapacity cp_default=
    Medium.specificHeatCapacityCp(sta_default)
    "Specific heat capacity of the fluid";

  Buildings.Fluid.HeatExchangers.PrescribedOutlet coo(
    redeclare package Medium = Medium,
    allowFlowReversal=allowFlowReversal,
    m_flow_nominal=m_flow_nominal,
    show_T=true,
    QMax_flow=0,
    dp_nominal=0,
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
    tau=60,
    use_X_wSet=false)
            "Cooling supply"
    annotation (Placement(transformation(extent={{40,-10},{20,10}})));

  Buildings.Fluid.HeatExchangers.PrescribedOutlet hea(
    redeclare package Medium = Medium,
    allowFlowReversal=allowFlowReversal,
    m_flow_nominal=m_flow_nominal,
    from_dp=false,
    show_T=true,
    QMin_flow=0,
    dp_nominal=dp_nominal,
    linearizeFlowResistance=linearizeFlowResistance,
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial,
    tau=60,
    use_X_wSet=false)
            "Heat supply"
    annotation (Placement(transformation(extent={{-40,-10},{-20,10}})));

  Buildings.Fluid.Sensors.TemperatureTwoPort senTem(
    redeclare package Medium = Medium,
    m_flow_nominal=m_flow_nominal,
    tau=0) "Temperature sensor"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}})));
public
  Modelica.Blocks.Interfaces.RealInput TSetHea(unit="K")
    "Temperature set point for heating"
    annotation (Placement(transformation(extent={{-320,60},{-280,100}})));
  Modelica.Blocks.Interfaces.RealInput TSetCoo(unit="K")
    "Temperature set point for cooling"
    annotation (Placement(transformation(extent={{-320,22},{-280,62}})));
  Modelica.Fluid.Interfaces.FluidPort_a port_a(
    redeclare final package Medium = Medium,
    h_outflow(start=Medium.h_default)) "Fluid connector a"
    annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=0,origin={-80,-300})));
  Modelica.Fluid.Interfaces.FluidPort_b port_b(
    redeclare final package Medium = Medium,
    h_outflow(start=Medium.h_default)) "Fluid connector b"
    annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=0, origin={80,-300})));
equation
  connect(QHea_flow, hea.Q_flow) annotation (Line(points={{290,60},{-10,60},{-10,8},{-19,8}},
                            color={0,0,127}));
  connect(coo.Q_flow, QCoo_flow) annotation (Line(points={{19,8},{10,8},{10,40},{290,40}},
                                         color={0,0,127}));
  connect(port_a, hea.port_a)
    annotation (Line(points={{-80,-300},{-80,0},{-40,0}},
                                                        color={0,127,255}));
  connect(coo.port_a, port_b)
    annotation (Line(points={{40,0},{80,0},{80,-300}},color={0,127,255}));
  connect(hea.port_b, senTem.port_a)
    annotation (Line(points={{-20,0},{-15,0},{-10,0}}, color={0,127,255}));
  connect(senTem.port_b, coo.port_b)
    annotation (Line(points={{10,0},{15,0},{20,0}}, color={0,127,255}));
  connect(hea.TSet, TSetHea) annotation (Line(points={{-42,8},{-58,8},{-58,80},{-300,80}},
                      color={0,0,127}));
  connect(TSetCoo, coo.TSet) annotation (Line(points={{-300,42},{-80,42},{-80,20},{52,20},{52,8},{42,8}},
                                               color={0,0,127}));
  annotation (
    Diagram(coordinateSystem(extent={{-280,-300},{280,300}})),
    Icon(coordinateSystem(extent={{-280,-300},{280,300}}),graphics={
        Rectangle(
          extent={{-282,-300},{280,300}},
          lineColor={0,0,127},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-242,224},{232,-258}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={95,95,95},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-172.75,5.75},{172.75,-5.75}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={0,0,255},
          fillPattern=FillPattern.Solid,
          origin={-79.75,-120.75},
          rotation=90),
        Rectangle(
          extent={{-82.5,5},{82.5,-5}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={0,0,255},
          fillPattern=FillPattern.Solid,
          origin={1.5,47},
          rotation=0),
        Rectangle(
          extent={{-100.5,5},{100.5,-5}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={0,0,255},
          fillPattern=FillPattern.Solid,
          origin={79.5,-193},
          rotation=90),
        Rectangle(
          extent={{-172.75,5.75},{172.75,-5.75}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={238,46,47},
          fillPattern=FillPattern.Solid,
          origin={80.25,-120.75},
          rotation=90),
        Rectangle(
          extent={{-44.5,5.25},{44.5,-5.25}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={238,46,47},
          fillPattern=FillPattern.Solid,
          origin={40.5,46.75},
          rotation=180)}),
    Documentation(info="<html>
<p>
Model of an ideal heating and cooling plant that takes as a parameter the set point
for the leaving fluid temperature.
</p>
</html>", revisions="<html>
<ul>
<li>
January 4, 2016, by Michael Wetter:<br/>
Set energy balance of heater and cooler to be dynamic and added
a temperature sensor.
This is due to a potential bug in Dymola 2016, Dassault SR00312338.
</li>
<li>
December 23, 2015, by Michael Wetter:<br/>
First implementation.
</li>
</ul>
</html>"));
end Ideal_T;
